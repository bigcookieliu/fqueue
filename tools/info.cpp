
// Copyright (c) 2015-2017 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of FQUEUE(https://github.com/niXman/fqueue) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <fqueue/fqueue.hpp>

#include <iostream>
#include <string>
#include <limits>

#include <ctime>

#include <cassert>
#include <cstring>

#include <unistd.h>
#include <sys/stat.h>

/***************************************************************************/

void usage(const char *argv0) {
    const char *p = std::strrchr(argv0, '/');
    
    std::cout << "usage: " << p+1 << " <fqueue file name>" << std::endl;
}

/***************************************************************************/

std::size_t file_size(const char *fname) {
    struct stat st;
    assert(0 == ::stat(fname, &st));

    return st.st_size;
}

std::string format_time(std::uint64_t nstime) {
    char buf[32] = "\0";

    std::time_t secs = nstime/1000000000llu;
    std::size_t nsecs= nstime%1000000000llu;
    
    std::strftime(buf, sizeof(buf), "%Y-%m-%d %H:%M:%S", ::localtime(&secs));
    std::string res(buf);
    res += "." + std::to_string(nsecs);
    
    return res;
}

std::string format_fsize(std::uint64_t fs) {
    static const std::uint64_t KB = 1024;
    static const std::uint64_t MB = KB*KB;
    static const std::uint64_t GB = MB*KB;
    static const std::uint64_t TB = GB*KB;
    char buf[32] = "\0";

    if ( fs/TB ) {
        std::snprintf(buf, sizeof(buf), "%.2f Tb", ((double)fs/TB));
        return buf;
    } else if ( fs/GB ) {
        std::snprintf(buf, sizeof(buf), "%.2f Gb", ((double)fs/GB));
        return buf;
    } else if ( fs/MB ) {
        std::snprintf(buf, sizeof(buf), "%.2f Mb", ((double)fs/MB));
        return buf;
    } else if ( fs/KB ) {
        std::snprintf(buf, sizeof(buf), "%.2f Kb", ((double)fs/KB));
        return buf;
    }

    std::snprintf(buf, sizeof(buf), "%u", (unsigned)fs);
    return buf;
}

/***************************************************************************/

int main(int argc, char **argv) {
    (void)argv;

    if ( argc != 2 ) {
        usage(argv[0]);
        return EXIT_SUCCESS;
    }
    
    const char *fname = argv[1];
    if ( 0 != ::access(fname, F_OK) ) {
        std::cerr << "can't open file " << fname << ". terminate." << std::endl;
        return EXIT_FAILURE;
    }
    
    fqueue::fqueue fq(fname);

    std::size_t filesize = file_size(fname);
    std::size_t records = fq.records();
    std::uint64_t mintime=0, maxtime=0;
    std::uint64_t minid=0, maxid=0;
    std::size_t
         datasize=0
        ,mindatasize=std::numeric_limits<std::size_t>::max()
        ,maxdatasize=std::numeric_limits<std::size_t>::min()
    ;
    
    auto rec = fq.first_record();
    datasize += rec.size;
    minid = rec.id;
    mintime = rec.nstime;
    
    for ( std::size_t i = 0; i < records-1; ++i ) {
        rec = fq.next_record();
        datasize += rec.size;
        mindatasize = (rec.size < mindatasize) ? rec.size : mindatasize;
        maxdatasize = (rec.size > maxdatasize) ? rec.size : maxdatasize;
    }
    maxid = rec.id;
    maxtime = rec.nstime;
    
    std::cout
    << "file size: " << format_fsize(filesize) << std::endl
    << "records  : " << records << std::endl
    << "data size: " << "total=" << format_fsize(datasize) << ", min=" << format_fsize(mindatasize) << ", max=" << format_fsize(maxdatasize) << std::endl
    << "ID       : [" << minid << ", " << maxid << "]" << std::endl
    << "time     : [" << format_time(mintime) << ", " << format_time(maxtime) << "]" << std::endl;
}

/***************************************************************************/
